extern crate netbpm;
use netbpm::pgm::{PGMEncoder,PGMDecoder};
use netbpm::{Mode,BitDepth};
use std::fs;
use std::error::Error;

// 6 10
const J:[u8;60] = [255,255,255,255,0,255,
                   255,255,255,255,0,255,
                   255,255,255,255,0,255,
                   255,255,255,255,0,255,
                   255,255,255,255,0,255,
                   255,255,255,255,0,255,
                   0,  255,255,255,0,255,
                   255,0,0,0,255,255,
                   255,255,255,255,255,255,
                   255,255,255,255,255,255];

// 6 10
const J_DOUBLE:[u8;120] = [255,255 ,255,255 ,255,255 ,255,255 ,0,0 ,255,255,
                           255,255 ,255,255 ,255,255 ,255,255 ,0,0 ,255,255,
                           255,255 ,255,255 ,255,255 ,255,255 ,0,0 ,255,255,
                           255,255 ,255,255 ,255,255 ,255,255 ,0,0 ,255,255,
                           255,255 ,255,255 ,255,255 ,255,255 ,0,0 ,255,255,
                           255,255 ,255,255 ,255,255 ,255,255 ,0,0 ,255,255,
                           0,0 ,255,255 ,255,255 ,255,255 ,0,0 ,255,255,
                           255,255 ,0,0 ,0,0 ,0,0 ,255,255 ,255,255,
                           255,255,255,255,255,255,255,255,255,255,255,255,
                           255,255,255,255,255,255,255,255,255,255,255,255];
// 12 10
const GRAD:[u8;120] = [255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0,
                       255,255,200,200,150,150,100,100,50,50,0,0];

// 12 10
const GRAD_DOUBLE:[u8;240] = [255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0,
                              255,255, 255,255, 200,200, 200,200, 150,150, 150,150, 100,100, 100,100, 50,50, 50,50, 0,0, 0,0];

// 30 20
const LONG_GRAD:[u8;600] = [255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0,
                            255,255,255,255,255,   200,200,200,200,200,   150,150,150,150,150,   100,100,100,100,100,   50,50,50,50,50,   0,0,0,0,0];

// 30 20
const LONG_GRAD_DOUBLE:[u8;1200] = [255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0,
                            255,255,255,255,255,255,255,255,255,255,   200,200,200,200,200,200,200,200,200,200,   150,150,150,150,150,150,150,150,150,150,   100,100,100,100,100,100,100,100,100,100,   50,50,50,50,50,50,50,50,50,50,   0,0,0,0,0,0,0,0,0,0];


pub fn test_arrs(size:u32, a:&[u8], b:&[u8]) -> bool {
    let mut ret = true;
    for i in 0..size {
        ret = ret && (a[i as usize] == b[i as usize]);
    }
    ret
}


#[test]
fn pgm_j_single_ascii() {
    let mut encoder = PGMEncoder::new("test_0a.pgm");
    let enc_result = encoder.save(&J, 6, 10, Mode::ASCII, BitDepth::EIGHT);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_0a.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(6, image.width);
    assert_eq!(10, image.height);
    assert_eq!(BitDepth::EIGHT, image.depth);
    assert!(test_arrs(60, &image.dat, &J));
    let _ = fs::remove_file("test_0a.pgm");
}

#[test]
fn pgm_j_single_binary() {
    let mut encoder = PGMEncoder::new("test_0b.pgm");
    let enc_result = encoder.save(&J, 6, 10, Mode::BINARY, BitDepth::EIGHT);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_0b.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(6, image.width);
    assert_eq!(10, image.height);
    assert_eq!(BitDepth::EIGHT, image.depth);
    assert!(test_arrs(60, &image.dat, &J));
    let _ = fs::remove_file("test_0b.pgm");
}

#[test]
fn pgm_j_double_ascii() {
    let mut encoder = PGMEncoder::new("test_1a.pgm");
    let enc_result = encoder.save(&J_DOUBLE, 6, 10, Mode::ASCII, BitDepth::SIXTEEN);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_1a.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(6, image.width);
    assert_eq!(10, image.height);
    assert_eq!(BitDepth::SIXTEEN, image.depth);
    assert!(test_arrs(120, &image.dat, &J_DOUBLE));
    let _ = fs::remove_file("test_1a.pgm");
}

#[test]
fn pgm_j_double_binary() {
    let mut encoder = PGMEncoder::new("test_1b.pgm");
    let enc_result = encoder.save(&J_DOUBLE, 6, 10, Mode::BINARY, BitDepth::SIXTEEN);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_1b.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(6, image.width);
    assert_eq!(10, image.height);
    assert_eq!(BitDepth::SIXTEEN, image.depth);
    assert!(test_arrs(120, &image.dat, &J_DOUBLE));
    let _ = fs::remove_file("test_1b.pgm");
}

#[test]
fn pgm_grad_single_ascii() {
    let mut encoder = PGMEncoder::new("test_2a.pgm");
    let enc_result = encoder.save(&GRAD, 12, 10, Mode::ASCII, BitDepth::EIGHT);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_2a.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(12, image.width);
    assert_eq!(10, image.height);
    assert_eq!(BitDepth::EIGHT, image.depth);
    assert!(test_arrs(120, &image.dat, &GRAD));
    let _ = fs::remove_file("test_2a.pgm");
}

#[test]
fn pgm_grad_single_binary() {
    let mut encoder = PGMEncoder::new("test_2b.pgm");
    let enc_result = encoder.save(&GRAD, 12, 10, Mode::BINARY, BitDepth::EIGHT);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_2b.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(12, image.width);
    assert_eq!(10, image.height);
    assert_eq!(BitDepth::EIGHT, image.depth);
    assert!(test_arrs(120, &image.dat, &GRAD));
    let _ = fs::remove_file("test_2b.pgm");
}

#[test]
fn pgm_grad_double_ascii() {
    let mut encoder = PGMEncoder::new("test_3a.pgm");
    let enc_result = encoder.save(&GRAD_DOUBLE, 12, 10, Mode::ASCII, BitDepth::SIXTEEN);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_3a.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(12, image.width);
    assert_eq!(10, image.height);
    assert_eq!(BitDepth::SIXTEEN, image.depth);
    assert!(test_arrs(240, &image.dat, &GRAD_DOUBLE));
    let _ = fs::remove_file("test_3a.pgm");
}

#[test]
fn pgm_grad_double_binary() {
    let mut encoder = PGMEncoder::new("test_3b.pgm");
    let enc_result = encoder.save(&GRAD_DOUBLE, 12, 10, Mode::BINARY, BitDepth::SIXTEEN);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_3b.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(12, image.width);
    assert_eq!(10, image.height);
    assert_eq!(BitDepth::SIXTEEN, image.depth);
    assert!(test_arrs(240, &image.dat, &GRAD_DOUBLE));
    let _ = fs::remove_file("test_3b.pgm");
}

#[test]
fn pgm_long_grad_single_ascii_error() {
    let mut encoder = PGMEncoder::new("test_4a.pgm");
    let enc_result = encoder.save(&LONG_GRAD, 30, 20, Mode::ASCII, BitDepth::EIGHT);
    match enc_result {
        Ok(_) => assert!(false),
        Err(e) => assert_eq!(e.description(),"Width can not be greater than 70 characters for ascii pgm files."),
    }
    let _ = fs::remove_file("test_4a.pgm");
}

#[test]
fn pgm_long_grad_single_binary() {
    let mut encoder = PGMEncoder::new("test_4b.pgm");
    let enc_result = encoder.save(&LONG_GRAD, 30, 20, Mode::BINARY, BitDepth::EIGHT);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_4b.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(30, image.width);
    assert_eq!(20, image.height);
    assert_eq!(BitDepth::EIGHT, image.depth);
    assert!(test_arrs(600, &image.dat, &LONG_GRAD));
    let _ = fs::remove_file("test_4b.pgm");
}

#[test]
fn pgm_long_grad_double_binary() {
    let mut encoder = PGMEncoder::new("test_5b.pgm");
    let enc_result = encoder.save(&LONG_GRAD_DOUBLE, 30, 20, Mode::BINARY, BitDepth::SIXTEEN);
    match enc_result {
        Ok(()) => assert!(true),
        Err(_) => assert!(false),
    }
    let mut decoder = PGMDecoder::new("test_5b.pgm");
    let image = decoder.load().unwrap();
    assert_eq!(30, image.width);
    assert_eq!(20, image.height);
    assert_eq!(BitDepth::SIXTEEN, image.depth);
    assert!(test_arrs(1200, &image.dat, &LONG_GRAD_DOUBLE));
    let _ = fs::remove_file("test_5b.pgm");
}
